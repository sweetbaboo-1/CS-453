#include <stdio.h>
#include <string>
#include <iostream>
#include <iomanip>
#include <cstring>
using namespace std;


void vtableWorking();
void vTableExploit(Safe v);

class Vulnerability{
    public:
        
        Vulnerability(){

        }
        virtual void safe() = 0;
        void setBuffer (long index, long * newBuffer){
            stackBuffer[index] = *newBuffer;
        }
    private:
        long stackBuffer[1];
};

class Safe : public Vulnerability{
    public:
        Safe() {
            
        }
        void safe(){
            cout << "Congratulations there isn't malicious code" << endl;
        }
};



void vtableWorking(){
    cout << "The conditions for V-table Spraying are as follows:" << endl;
    cout << "\t1. The vulnerable class must be polymorphic." << endl;
    cout << "\t2. The class must have a buffer as a member variable." << endl;
    cout << "\t3. Through some vulnerability, there must be a way for user input to overwrite parts of the V-Table." << endl;
    cout << "\t4. After a virtual function pointer is overwritten, the virtual function must be called." << endl;
    Safe v;
    v.safe();
    vTableExploit(v);
}

void vTableExploit(Safe v){
    cout << "Reasons why V-Table Spraying Occurs:"<< endl;
    cout << "\t1. There is polymorphism going on with the Safe inherited class of Vulnerable" << endl;
    cout << "\t2. The vulnerable class has a variable that is a buffer it's name is stackBuffer" << endl;
    cout << "\t3. We spray the V-table by going outside the bounds of the buffer and set the variable to something" << endl;
    cout << "\t4. Then after the overwrite then we call the safe function which will crash the program" << endl;
    long * exploit;
    *exploit = (long) 85;
    long index = -1;
    v.setBuffer(index, exploit);
    v.safe();
}
