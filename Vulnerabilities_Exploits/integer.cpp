#include <iostream>
#include <string>
#include <iomanip>
#include <cassert>
using namespace std;

/*************************************
 * For an integer overflow vulnerability to exist, the following must be present:
*	1. There must be a security check represented by an expression.
*	2. The expression must have the potential for overflow.
*	3. At least one of the numbers used to compute the sentinel must be 
*    reachable through external input. This sentinel is a variable used to make 
*    the security decision from the first requirement
 ****************************************/
inline void intVulnerability(int offset, int newLaunchCode)
{
	// array of valid launch codes
	int launchCodes[32] = {123456, 829384, 192848, 349292, 349609, 435621, 235673, 239581, 354674, 373568, 236345};
	int * sentinel = launchCodes + 32; // pointer to the end of the buffer

	// if the offset is within the allotted memory, input new launch code to that space
	try
	{
		//We are able to exploit this security check and "break" the code by going outside the bounters of or past the end of the sential pointer
		//Another way to view is that we are pointing with (offset + launch code) past the end of the array
		if (offset + launchCodes < sentinel)
			launchCodes[offset] = newLaunchCode;
	}
	catch (int e)
	{
		cout << "Security Check Failed" << endl;
	}
	
	// Display contents of the launch codes array
	for (int i = 0; i < 32; i++)
	{
		cout << "launchCodes[" << i << "] = " << launchCodes[i] << endl;
	}
}

/**************************************
 * integerOverflow WORKING
 * Call integerOverflowVulnerability() in a way that does
 * not yield unexpected behavior
 *************************************/
inline void intWorking()
{

	int offset = 29; //user input
	int newLaunchCode = 543968;

	intVulnerability(offset, newLaunchCode);
	cout << "\nThis function is inserting a new launch code into the launch codes array.\n"
		 << "it is passing an offset value of 29 which is within the bounds of an int\n"
		 << "and also within the bounds of the launch codes array.\n";
}

/**************************************
 * For an integer overflow vulnerability to be exploited, the attacker must do the 
*  following:
*  1. Provide input, either a buffer size or a single value, that is directly or 
*		indirectly used in the vulnerable expression.
*  2. The input must exceed the valid bounds of the data-type, resulting in an 
*		overflow or underflow condition.
 *************************************/
inline void intExploit()
{
	int newLaunchCode = 345257; //user input after offset compute
	cout << "\nThis malicious function is passing an offset value of 3 billion which is beyond the\n"
		 << "bounds of an int. This will overflow the int offset in the vulnerability function and \n"
		 << "cause the program to crash.\n";
	intVulnerability(3000000000, newLaunchCode); //malicious offset greater than int can hold
}

inline int integerMain()
{
	bool keepRunning = true;
	string userInput = "";

	while (keepRunning)
	{
		cout << "\n1. Working Input"
			 << "\n2. Malicous Input"
			 << "\nQ. Exit\n";
		cin >> userInput;

		if (userInput == "1")
			intWorking();
		else if (userInput == "2")
			intExploit();
		else if (userInput == "q" || userInput == "Q") // exit
		{
			cout << "Thank you, goodbye\n";
			keepRunning = false;
		}
		else
			cout << "Please enter a valid option\n";
	}

	return 0;
}