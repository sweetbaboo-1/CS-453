/*************************************
 * For an integer overflow vulnerability to exist, the following must be present:
*	1. There must be a security check represented by an expression.
*	2. The expression must have the potential for overflow.
*	3. At least one of the numbers used to compute the sentinel must be 
*    reachable through external input. This sentinel is a variable used to make 
*    the security decision from the first requirement
 ****************************************/
void intVulnerability(/* feel free to add parameters */)
{
}

/**************************************
 * integerOverflow WORKING
 * Call integerOverflowVulnerability() in a way that does
 * not yield unexpected behavior
 *************************************/
void intWorking()
{

}

/**************************************
 * For an integer overflow vulnerability to be exploited, the attacker must do the 
*  following:
*  1. Provide input, either a buffer size or a single value, that is directly or 
*		indirectly used in the vulnerable expression.
*  2. The input must exceed the valid bounds of the data-type, resulting in an 
*		overflow or underflow condition.
 *************************************/
void intExploit()
{

}

int integerMain()
{
	intVulnerability();
	intWorking();
	intExploit();

	return 0;
}