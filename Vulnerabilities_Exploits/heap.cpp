#pragma once

#include <iostream>
#include <assert.h>
/*************************************
 * heap VULNERABILTY
 * 1. There must be two adjacent heap buffers.
 * 2. The first buffer must be reachable through external input.
 * 3. The mechanism to fill the buffer from the external input must not correctly check for the buffer size.
 * 4. The second buffer must be released before the first.
 * 5. The first buffer must be overrun (extend beyond the intended limits of the array).
 ****************************************/
void heapVulnerability(char input[], int count)
{
    char *buffer1 = new char[4]; // requires two buffers on the heap
    char *buffer2 = new char[4];
    assert(buffer1 < buffer2); // buffer 1 must be before buffer 2!

    for (int i = 0; i < count; i++)
    {
        buffer1[i] = input[i];
    }

    for (int i = 0; i < 4; i++) {
        std::cout << buffer1[i];
    }

    std::cout << std::endl;

    delete[] buffer2; // need to delete second buffer first
    delete[] buffer1;
}

/**************************************
 * heap WORKING
 * Call heapVulnerability() in a way that does not yield unexpected behavior
 *************************************/
void heapWorking()
{
    char validInput[] = {'H','e','l','p'};
    heapVulnerability(validInput, 4);
}

/**************************************
 * heap EXPLOIT (spraying)
 * 1. The attacker must provide more data into the outwardly facing heap buffer than the buffer is designed to hold.
 * 2. The attacker must know the layout of the Memory Control Block (MCB) (essentially a linked list) residing just after the buffer.
 * 3. The attacker must provide a new MCB containing both the location of the memory overwrite and the new data to be overwritten.
 *************************************/
void heapExploit()
{
    char invalidInput[] = {'t', 'h', 'i', 's', 'i', 'n', 'p', 'u', 't', 'i', 's', 's', 'u', 's', 't', 'h', 'i', 's', 'i', 'n', 'p', 'u', 't', 'i', 's', 's', 'u', 's','t', 'h', 'i', 's', 'i', 'n', 'p', 'u', 't', 'i', 's', 's', 'u', 's', 't', 'h', 'i', 's', 'i', 'n', 'p', 'u', 't', 'i', 's', 's', 'u', 's'};
    heapVulnerability(invalidInput, 56);
}
