#include <stdio.h>
#include <string>
#include <iostream>
#include <iomanip>
#include <cstring>
using namespace std;

void arcVulnerability();
void arcWorking();
void arcExploit();
string safe(){
    cout << (void*)&safe << endl;
    return "Safe";
}

void arcVulnerability(long buffer[4]){
    string (*foo)() = safe;
    if(buffer[0] != (long)-1) foo = (string (*) ())(buffer);
    cout << foo() << endl;
}

void arcWorking(){
    long buff[4];
    buff[0] = (long) -1;
    cout << "The conditions for Arc Injection vulnerabilities are:" << endl;
    cout << "\t1. There must be a function pointer in the code" << endl;
    cout << "\t2. Through some vulnerability, there must be a way for user input to overwrite the function pointer." << endl;
    cout << "\t3. After the memory is overwritten, the function pointer must be dereferenced." << endl;
    arcVulnerability(buff);
}

void arcExploit(){
    long buff[4];
    buff[0] = 0x4015a7;
    cout << "For ARC Injection exploitation 2 conditions must happen: "<< endl;
    cout << "\t1. The attacker must exploit a vulnerability allowing unintended access to the function pointer." << endl;
    cout << "\t2. The attacker must have the address to another function which is to be used to replace the existing function pointer." << endl;
    cout << "How we are accomplishing?" << endl;
    cout << "\tThere is just a simple check to see if there's anything in the buffer variable."<< endl;
    cout << "\tThen it overwrites the function if there is another function not passed in correctly and the program crashes. " << endl;
    arcVulnerability(buff);
}
